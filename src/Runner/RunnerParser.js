/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var RunnerParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,28],$V2=[1,21],$V3=[1,20],$V4=[1,14],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,19],$Va=[1,22],$Vb=[1,23],$Vc=[1,29],$Vd=[1,17],$Ve=[1,16],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[5,12,13,14,19,26,35,36,37,38,40,41,42,47,50,60,65,66,67,68],$Vk=[1,51],$Vl=[1,40],$Vm=[1,42],$Vn=[1,53],$Vo=[1,35],$Vp=[1,36],$Vq=[1,37],$Vr=[1,38],$Vs=[1,39],$Vt=[1,41],$Vu=[1,43],$Vv=[1,44],$Vw=[1,45],$Vx=[1,46],$Vy=[1,47],$Vz=[1,48],$VA=[1,49],$VB=[1,52],$VC=[5,12,13,14,19,20,26,35,36,37,38,40,41,42,47,50,60,65,66,67,68],$VD=[1,63],$VE=[13,16,20,24,27,31,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,74],$VF=[2,11],$VG=[2,78],$VH=[1,73],$VI=[2,90],$VJ=[13,16,20,24,27,31,45,46,48,49,50,51,52,53,54,55,56,57,58,59],$VK=[1,97],$VL=[13,20],$VM=[13,14,19,20,35,36,37,38,40,41,42,47,50,60,65,66,67,68],$VN=[1,105],$VO=[16,24,48],$VP=[13,16,20,24,27,31,45,46,48,49,50,54,55,56,57,58,59],$VQ=[13,16,20,24,27,31,45,46,48,49,50,51,52,54,55,56,57,58,59],$VR=[13,16,20,24,27,31,48,56,57,58,59],$VS=[1,117],$VT=[1,123],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,124],$VY=[1,134],$VZ=[13,16],$V_=[1,140],$V$=[13,16,20,24,27,31,46,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"GlobalInstructions_":4,"EOF":5,"GlobalInstructions":6,"Statement":7,"TypeDef":8,"FunctionDef":9,"StatementList_":10,"StatementList":11,"FUNCTION":12,"IDENTIFIER":13,"(":14,"ParamList_":15,")":16,":":17,"MyTypeNode":18,"{":19,"}":20,"VOID":21,"ParamList":22,"Param":23,",":24,"Type":25,"TYPE":26,"=":27,"AttributeList_":28,"AttributeList":29,"Attribute":30,";":31,"Expression":32,"Declaration":33,"Block":34,"WHILE":35,"BREAK":36,"CONTINUE":37,"RETURN":38,"Expresssion":39,"LET":40,"NUMBER":41,"STRING":42,"BOOLEAN":43,"ARRAY":44,"<":45,">":46,"[":47,"]":48,"+":49,"-":50,"*":51,"/":52,"**":53,"<=":54,">=":55,"==":56,"!=":57,"OR":58,"AND":59,"NOT":60,"++":61,"--":62,"MemberAccess":63,"F":64,"TRUE":65,"FALSE":66,"NULL":67,"UNDEFINED":68,"ExpressionList_":69,"PropertyList":70,"PropertyList_":71,"Property":72,"ExpressionList":73,".":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"FUNCTION",13:"IDENTIFIER",14:"(",16:")",17:":",18:"MyTypeNode",19:"{",20:"}",21:"VOID",24:",",26:"TYPE",27:"=",31:";",35:"WHILE",36:"BREAK",37:"CONTINUE",38:"RETURN",39:"Expresssion",40:"LET",41:"NUMBER",42:"STRING",43:"BOOLEAN",44:"ARRAY",45:"<",46:">",47:"[",48:"]",49:"+",50:"-",51:"*",52:"/",53:"**",54:"<=",55:">=",56:"==",57:"!=",58:"OR",59:"AND",60:"NOT",61:"++",62:"--",65:"TRUE",66:"FALSE",67:"NULL",68:"UNDEFINED",74:"."},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[10,1],[10,0],[11,2],[11,1],[9,10],[9,10],[15,1],[15,0],[22,3],[22,2],[22,2],[22,1],[23,3],[8,6],[28,1],[28,0],[29,3],[29,3],[29,2],[29,2],[29,2],[29,1],[30,3],[7,2],[7,2],[7,1],[7,7],[7,2],[7,2],[7,2],[7,3],[34,3],[33,4],[33,6],[33,4],[25,1],[25,1],[25,1],[25,1],[25,4],[25,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,2],[32,2],[32,2],[32,3],[32,1],[64,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,4],[64,3],[64,3],[71,1],[71,0],[70,3],[70,2],[70,2],[70,1],[72,3],[69,1],[69,0],[73,3],[73,1],[63,5],[63,2],[63,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = $$[$0-1];
        this.$.setAstNode(_$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
        return this.$;
    
break;
case 2: case 10: case 16: case 24: case 70: case 82: case 89:

        this.$ = $$[$0];
    
break;
case 3:

        this.$ = new GlobalInstructions();
    
break;
case 4:

        this.$.addStatement($$[$0]);
    
break;
case 5:

        this.$.addTypeDef($$[$0]);
    
break;
case 6:

        this.$.addFunctionDef($$[$0]);
    
break;
case 7:

        this.$ = new GlobalInstructions();
        this.$.addStatement($$[$0]);
    
break;
case 8:

        this.$ = new GlobalInstructions();
        this.$.addTypeDef($$[$0]);
    
break;
case 9:

        this.$ = new GlobalInstructions();
        this.$.addFunctionDef($$[$0]);
    
break;
case 11: case 17: case 83: case 90:

        this.$ = new Array();
    
break;
case 12: case 19: case 28: case 85:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 13: case 21: case 31: case 87: case 92:

        this.$ = new Array($$[$0]);
    
break;
case 14:

        this.$ = new FunctionDef($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column, _$[$0-8].last_line, _$[$0-8].last_column);
    
break;
case 15:

        this.$ = new FunctionDef($$[$0-8], $$[$0-6], null, $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column, _$[$0-8].last_line, _$[$0-8].last_column);
    
break;
case 18: case 26: case 27: case 84:

        this.$ = $$[$0-2];
        this.$.push($$[$0-1]);
    
break;
case 20: case 29: case 30: case 86:

        this.$ = new Array($$[$0-1]);
    
break;
case 22:

        this.$ = new ParamNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 23:

        this.$ = new TypeDef($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0-4].last_line, _$[$0-4].last_column);
    
break;
case 25:

        new Array();
    
break;
case 32:

        this.$ = new AttributeNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 33:

        this.$ = new Statement(StatementKind.ExpressionKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 34:

        this.$ = new Statement(StatementKind.DeclarationKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 35:

        this.$ = new Statement(StatementKind.DeclarationKind, new Block($$[$0]), _$[$0].first_line, _$[$0].first_column, _$[$01].last_line, _$[$01].last_column);
    
break;
case 36:

        this.$ = new Statement(StatementKind.WhileKind, new WhileStatement($$[$0-4], $$[$0-1]), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0-1].last_line, _$[$0-1].last_column);
    
break;
case 37:

        this.$ = new Statement(StatementKind.BreakKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 38:

        this.$ = new Statement(StatementKind.ContinueKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 39:

        this.$ = new Statement(StatementKind.ReturnKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 40:

        this.$ = new Statement(StatementKind.ReturnWithExpression, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 41:

        this.$ = new Block($$[$0-1]);
    
break;
case 42:

        this.$ = new Declaration($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 43:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 44:

        this.$ = new Declaration($$[$0-3], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 45:

        this.$ = MyTypeNode.makeNumberTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 46:

        this.$ = MyTypeNode.makeStringTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 47:

        this.$ = MyTypeNode.makeBooleanTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 48:

        this.$ = MyTypeNode.makeCustomTypeNode($$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 49:

        this.$ = MyTypeNode.makeGenericArrayTypeNode($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 50:

        this.$ = MyTypeNode.makeBoxyArrayTypeNode($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 51:

        this.$ = new Expression(ExpressionKind.ADDITION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 52:

        this.$ = new Expression(ExpressionKind.SUBSTRACTION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 53:
 
        this.$ = new Expression(ExpressionKind.MULTIPLICATION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 54:

        this.$ = new Expression(ExpressionKind.DIVISION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 55:

        this.$ = new Expression(ExpressionKind.POWER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 56:

        this.$ = new Expression(ExpressionKind.LESS, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 57:

        this.$ = new Expression(ExpressionKind.LESS_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 58:

        this.$ = new Expression(ExpressionKind.GREATER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 59:

        this.$ = new Expression(ExpressionKind.GREATER_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 60:

        this.$ = new Expression(ExpressionKind.EQUAL_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 61:

        this.$ = new Expression(ExpressionKind.NOT_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 62:

        this.$ = new Expression(ExpressionKind.OR, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 63:

        this.$ = new Expression(ExpressionKind.AND, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 64:

        this.$ = new Expression(ExpressionKind.NOT, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 65:

        this.$ = new Expression(ExpressionKind.UNARY_MINUS, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 66:

        this.$ = new Expression(ExpressionKind.POSTFIX_INC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 67:

        this.$ = new Expression(ExpressionKind.POSTFIX_DEC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 68:

        this.$ = new Expression(ExpressionKind.MEMBER_ACCESS, new MemberAccessExpression($$[$0-1], $$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 69:

        this.$ = new Expression(ExpressionKind.ASSIGNMENT, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 71:
 
        //hay que pasar la ubicacion de inicio y final de los ( )
        this.$ = $$[$0-1];
        this.$.first_line = _$[$0-2].first_line;
        this.$.first_column = _$[$0-2].first_column;
        this.$.last_line = _$[$0].last_line;

        this.$.last_column = _$[$0].last_column;
    
break;
case 72:
 
        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Number($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 73:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new String($$[$0].slice(1, $$[$0].length - 1))), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 74:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(true)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 75:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(false)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 76:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(null), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 77:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(undefined), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 78:

        this.$ = new Expression(ExpressionKind.IDENTIFIER, new IdentifierExpression(new String($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 79:

        this.$ = new Expression(ExpressionKind.FUNCTION_CALL, new FunctionCallExpression(new String($$[$0-3]), $$[$0-1]), _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 80:

        this.$ = new Expression(ExpressionKind.OBJECT_LITERAL, new ObjectLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 81:

        this.$ = new Expression(ExpressionKind.ARRAY_LITERAL, new ArrayLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 88:

        this.$ = new PropertyNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 91:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 93:

        this.$ = new MemberAccess(AccessKind.FunctionAccess, new FunctionAccess($$[$0-3], $$[$0-1]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 94:

        this.$ = new MemberAccess(AccessKind.AttributeAccess, new AttributeAccess($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 95:

        this.$ = new MemberAccess(AccessKind.IndexAccess, new IndexAccess($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,12:$V0,13:$V1,14:$V2,19:$V3,26:$V4,32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{1:[3]},{5:[1,30]},{5:[2,2],7:31,8:32,9:33,12:$V0,13:$V1,14:$V2,19:$V3,26:$V4,32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),{27:$Vk,31:[1,34],45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:50,74:$VB},{31:[1,54]},o($VC,[2,35]),{14:[1,55]},{31:[1,56]},{31:[1,57]},{31:[1,58],39:[1,59]},{13:[1,60]},{13:[1,61]},{13:$V1,14:$V2,19:$VD,32:62,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:64,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VE,[2,70]),{13:[1,65]},{7:70,10:66,11:68,13:[1,71],14:$V2,19:$V3,20:$VF,32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi,70:67,72:69},{13:$V1,14:$V2,19:$VD,32:72,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VE,[2,72]),o($VE,[2,73]),o($VE,[2,74]),o($VE,[2,75]),o($VE,[2,76]),o($VE,[2,77]),o($VE,$VG,{14:$VH}),{13:$V1,14:$V2,19:$VD,32:76,41:$Va,42:$Vb,47:$Vc,48:$VI,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:74,73:75},{1:[2,1]},o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($VC,[2,33]),{13:$V1,14:$V2,19:$VD,32:77,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:78,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:79,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:80,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:81,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:82,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:83,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:84,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:85,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:86,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:87,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:88,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,19:$VD,32:89,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VE,[2,66]),o($VE,[2,67]),o($VE,[2,68]),{13:$V1,14:$V2,19:$VD,32:90,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:[1,91]},{13:$V1,14:$V2,19:$VD,32:92,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VC,[2,34]),{13:$V1,14:$V2,19:$VD,32:93,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),{31:[1,94]},{27:[1,95]},{14:[1,96]},o($VJ,[2,64],{63:50,47:$Vn,61:$Vz,62:$VA,74:$VB}),{13:$VK,70:67,72:69},o($VJ,[2,65],{63:50,47:$Vn,61:$Vz,62:$VA,74:$VB}),{17:[1,99],27:[1,98]},{20:[1,100]},{13:$VK,20:[1,101],72:102},{7:103,13:$V1,14:$V2,19:$V3,20:[2,10],32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VL,[2,87],{24:[1,104]}),o($VM,[2,13]),o([27,31,45,46,47,49,50,51,52,53,54,55,56,57,58,59,61,62,74],$VG,{14:$VH,17:$VN}),{16:[1,106],27:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:50,74:$VB},{13:$V1,14:$V2,16:$VI,19:$VD,32:76,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:107,73:75},{48:[1,108]},o([16,48],[2,89],{24:[1,109]}),o($VO,[2,92],{63:50,27:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,74:$VB}),o($VP,[2,51],{63:50,47:$Vn,51:$Vq,52:$Vr,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VP,[2,52],{63:50,47:$Vn,51:$Vq,52:$Vr,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VQ,[2,53],{63:50,47:$Vn,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VQ,[2,54],{63:50,47:$Vn,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VQ,[2,55],{63:50,47:$Vn,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VR,[2,56],{63:50,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VR,[2,57],{63:50,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VR,[2,58],{63:50,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VR,[2,59],{63:50,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,61:$Vz,62:$VA,74:$VB}),o($VR,[2,60],{63:50,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,61:$Vz,62:$VA,74:$VB}),o($VR,[2,61],{63:50,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,61:$Vz,62:$VA,74:$VB}),o([13,16,20,24,27,31,48,58],[2,62],{63:50,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vy,61:$Vz,62:$VA,74:$VB}),o([13,16,20,24,27,31,48,58,59],[2,63],{63:50,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,61:$Vz,62:$VA,74:$VB}),o([13,16,20,24,31,48],[2,69],{63:50,27:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,74:$VB}),o($VE,[2,94],{14:[1,110]}),{27:$Vk,45:$Vl,46:$Vm,47:$Vn,48:[1,111],49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:50,74:$VB},{16:[1,112],27:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:50,74:$VB},o($VC,[2,40]),{19:[1,113]},{13:$VS,15:114,16:[2,17],22:115,23:116},{17:$VN},{13:$V1,14:$V2,19:$VD,32:118,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$VT,25:119,41:$VU,42:$VV,43:$VW,44:$VX},o($VC,[2,41]),o($VE,[2,80]),o($VL,[2,85],{24:[1,125]}),o($VM,[2,12]),o($VL,[2,86]),{13:$V1,14:$V2,19:$VD,32:126,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},o($VE,[2,71]),{16:[1,127]},o($VE,[2,81]),{13:$V1,14:$V2,19:$VD,32:128,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{13:$V1,14:$V2,16:$VI,19:$VD,32:76,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:129,73:75},o($VE,[2,95]),{19:[1,130]},{13:$VY,20:[2,25],28:131,29:132,30:133},{16:[1,135]},{13:$VS,16:[2,16],23:136},o($VZ,[2,21],{24:[1,137]}),{17:[1,138]},{27:$Vk,31:[2,42],45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:50,74:$VB},{27:[1,139],31:[2,44],47:$V_},o($V$,[2,45]),o($V$,[2,46]),o($V$,[2,47]),o($V$,[2,48]),{45:[1,141]},o($VL,[2,84]),o([13,20,24],[2,88],{63:50,27:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,74:$VB}),o($VE,[2,79]),o($VO,[2,91],{63:50,27:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,74:$VB}),{16:[1,142]},{7:70,10:143,11:68,13:$V1,14:$V2,19:$V3,20:$VF,32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{20:[1,144]},{13:$VY,20:[2,24],30:145},o($VL,[2,31],{24:[1,147],31:[1,146]}),{17:[1,148]},{17:[1,149]},o($VZ,[2,19],{24:[1,150]}),o($VZ,[2,20]),{13:$VT,25:151,41:$VU,42:$VV,43:$VW,44:$VX},{13:$V1,14:$V2,19:$VD,32:152,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{48:[1,153]},{13:$VT,25:154,41:$VU,42:$VV,43:$VW,44:$VX},o($VE,[2,93]),{20:[1,155]},o($Vj,[2,23]),o($VL,[2,28],{24:[1,156],31:[1,157]}),o($VL,[2,29]),o($VL,[2,30]),{13:$VT,25:158,41:$VU,42:$VV,43:$VW,44:$VX},{18:[1,159],21:[1,160]},o($VZ,[2,18]),o([13,16,24],[2,22],{47:$V_}),{27:$Vk,31:[2,43],45:$Vl,46:$Vm,47:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:50,74:$VB},o($V$,[2,50]),{46:[1,161],47:$V_},o($VC,[2,36]),o($VL,[2,26]),o($VL,[2,27]),o([13,20,24,31],[2,32],{47:$V_}),{19:[1,162]},{19:[1,163]},o($V$,[2,49]),{7:70,10:164,11:68,13:$V1,14:$V2,19:$V3,20:$VF,32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{7:70,10:165,11:68,13:$V1,14:$V2,19:$V3,20:$VF,32:7,33:8,34:9,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:$Va,42:$Vb,47:$Vc,50:$Vd,60:$Ve,64:18,65:$Vf,66:$Vg,67:$Vh,68:$Vi},{20:[1,166]},{20:[1,167]},o($Vj,[2,14]),o($Vj,[2,15])],
defaultActions: {30:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Expression, ExpressionKind, 
    UnaryExpression, BinaryExpression, TernaryExpression, LiteralExpression, 
    IdentifierExpression, FunctionCallExpression, MemberAccessExpression, 
    PropertyNode, ObjectLiteralExpression, ArrayLiteralExpression } = require('../Ast/Expression');
    const { MemberAccess, AccessKind, FunctionAccess, IndexAccess, AttributeAccess } = require('../Ast/MemberAccess');
    const { Statement, StatementKind, Block, WhileStatement } = require('../Ast/Statement');
    const { Assignment } = require('../Ast/Assignment');
    const { Declaration } = require('../Ast/Declaration');
    const { MyTypeNode, MyTypeNodeKind } = require('../Ast/MyTypeNode');
    const { GlobalInstructions } = require('../Ast/GlobalInstructions')
    const { TypeDef, AttributeNode } = require('../Ast/TypeDef')
    const { FunctionDef, ParamNode } = require('../Ast/FunctionDef')
    //const {Literal} = require('../Expression/Literal');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 65
break;
case 4:return 66
break;
case 5:return 68
break;
case 6:return 67
break;
case 7:return 26
break;
case 8:return 44
break;
case 9:return 12
break;
case 10:return 35
break;
case 11:return 36
break;
case 12:return 37
break;
case 13:return 38
break;
case 14:return 58
break;
case 15:return 59
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 55
break;
case 19:return 54
break;
case 20:return 46
break;
case 21:return 45
break;
case 22:return 49
break;
case 23:return 50
break;
case 24:return 51
break;
case 25:return 52
break;
case 26:return '%'
break;
case 27:return 53
break;
case 28:return 60
break;
case 29:return 61
break;
case 30:return 62
break;
case 31:return 14
break;
case 32:return 16
break;
case 33:return 27
break;
case 34:return 74
break;
case 35:return 47
break;
case 36:return 48
break;
case 37:return 40
break;
case 38:return 41
break;
case 39:return 42
break;
case 40:return 43
break;
case 41:return 21
break;
case 42:return 24
break;
case 43:return 31
break;
case 44:return 19
break;
case 45:return 20
break;
case 46:return 17
break;
case 47:return '~'
break;
case 48:return 5
break;
case 49:return 41
break;
case 50:return 13
break;
case 51:return 42
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:function\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:OR\b)/,/^(?:AND\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:NOT\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:let\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:~)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:("[^"]*"))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = RunnerParser;
exports.Parser = RunnerParser.Parser;
exports.parse = function () { return RunnerParser.parse.apply(RunnerParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}