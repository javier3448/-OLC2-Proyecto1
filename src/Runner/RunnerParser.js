/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var RunnerParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,25],$V2=[1,17],$V3=[1,10],$V4=[1,18],$V5=[1,11],$V6=[1,16],$V7=[1,19],$V8=[1,20],$V9=[1,14],$Va=[1,13],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[5,11,12,13,15,27,28,30,31,32,33,39,49,54,55,56,57],$Vg=[1,47],$Vh=[1,36],$Vi=[1,38],$Vj=[1,31],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,37],$Vp=[1,39],$Vq=[1,40],$Vr=[1,41],$Vs=[1,42],$Vt=[1,43],$Vu=[1,44],$Vv=[1,45],$Vw=[1,48],$Vx=[1,49],$Vy=[5,11,12,13,15,17,27,28,30,31,32,33,39,49,54,55,56,57],$Vz=[1,55],$VA=[13,14,17,20,21,29,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,63,64,65],$VB=[2,3],$VC=[2,63],$VD=[1,65],$VE=[13,14,17,20,21,29,36,37,38,39,40,41,42,43,44,45,46,47,48,65],$VF=[1,84],$VG=[13,17],$VH=[13,15,17,27,28,30,31,32,33,39,49,54,55,56,57],$VI=[1,92],$VJ=[2,74],$VK=[13,14,17,20,21,29,36,37,38,39,43,44,45,46,47,48,65],$VL=[13,14,17,20,21,29,36,37,38,39,40,41,43,44,45,46,47,48,65],$VM=[13,14,17,20,21,29,45,46,47,48,65],$VN=[1,106],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,107],$VS=[20,29],$VT=[1,117],$VU=[14,20,21,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"GlobalInstructions_":4,"EOF":5,"StatementList_":6,"StatementList":7,"Statement":8,"GlobalInstructions":9,"TypeDef":10,"FunctionDef":11,"TYPE":12,"IDENTIFIER":13,"=":14,"{":15,"AttributeList_":16,"}":17,"AttributeList":18,"Attribute":19,",":20,";":21,":":22,"Type":23,"Expression":24,"Declaration":25,"Block":26,"WHILE":27,"(":28,")":29,"BREAK":30,"LET":31,"NUMBER":32,"STRING":33,"BOOLEAN":34,"ARRAY":35,"<":36,">":37,"+":38,"-":39,"*":40,"/":41,"**":42,"<=":43,">=":44,"==":45,"!=":46,"OR":47,"AND":48,"NOT":49,"++":50,"--":51,"MemberAccess":52,"F":53,"TRUE":54,"FALSE":55,"NULL":56,"UNDEFINED":57,"ExpressionList_":58,"PropertyList":59,"PropertyList_":60,"Property":61,"ExpressionList":62,".":63,"[":64,"]":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"FunctionDef",12:"TYPE",13:"IDENTIFIER",14:"=",15:"{",17:"}",20:",",21:";",22:":",27:"WHILE",28:"(",29:")",30:"BREAK",31:"LET",32:"NUMBER",33:"STRING",34:"BOOLEAN",35:"ARRAY",36:"<",37:">",38:"+",39:"-",40:"*",41:"/",42:"**",43:"<=",44:">=",45:"==",46:"!=",47:"OR",48:"AND",49:"NOT",50:"++",51:"--",54:"TRUE",55:"FALSE",56:"NULL",57:"UNDEFINED",63:".",64:"[",65:"]"},
productions_: [0,[3,2],[6,1],[6,0],[7,2],[7,1],[4,1],[4,0],[9,2],[9,2],[9,2],[9,1],[9,1],[9,1],[10,6],[16,1],[16,0],[18,3],[18,3],[18,2],[18,2],[19,3],[8,2],[8,2],[8,1],[8,7],[8,2],[26,3],[25,4],[25,6],[25,4],[23,1],[23,1],[23,1],[23,1],[23,4],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,2],[24,2],[24,3],[24,1],[53,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,4],[53,3],[60,1],[60,0],[59,3],[59,2],[59,2],[59,1],[61,3],[58,1],[58,0],[62,3],[62,1],[52,5],[52,2],[52,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = $$[$0-1];
        this.$.setAstNode(_$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
        return $$[$0-1];
    
break;
case 2: case 6: case 15: case 55: case 66: case 73:

        this.$ = $$[$0];
    
break;
case 3: case 7: case 74:

        this.$ = new Array();
    
break;
case 4: case 69:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 5: case 71: case 76:

        this.$ = new Array($$[$0]);
    
break;
case 8:

        this.$.addStatement($$[$0]);
    
break;
case 9:

        this.$.addTypeDef($$[$0]);
    
break;
case 10:

        this.$.addFunctionDef($$[$0]);
    
break;
case 11:

        this.$ = new GlobalInstructions();
        this.$.addStatement($$[$0]);
    
break;
case 12:

        this.$ = new GlobalInstructions();
        this.$.addTypeDef($$[$0]);
    
break;
case 13:

        this.$ = new GlobalInstructions();
        this.$.addFunctionDef($$[$0]);
    
break;
case 14:

        this.$ = new TypeDef($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0-4].last_line, _$[$0-4].last_column);
    
break;
case 16: case 67:

        return new Array();
    
break;
case 17: case 18: case 68:

        this.$ = $$[$0-2];
        this.$.push($$[$0-1]);
    
break;
case 19: case 20: case 70:

        this.$ = new Array($$[$0-1]);
    
break;
case 21:

        this.$ = new AttributeNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 22:

        this.$ = new Statement(StatementKind.ExpressionKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 23:

        this.$ = new Statement(StatementKind.DeclarationKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 24:

        this.$ = new Statement(StatementKind.DeclarationKind, new Block($$[$0]), _$[$0].first_line, _$[$0].first_column, _$[$01].last_line, _$[$01].last_column);
    
break;
case 25:

        this.$ = new Statement(StatementKind.WhileKind, new WhileStatement($$[$0-4], $$[$0-1]), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0-1].last_line, _$[$0-1].last_column);
    
break;
case 26:

        this.$ = new Statement(StatementKind.BreakKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 27:

        this.$ = new Block($$[$0-1]);
    
break;
case 28:

        this.$ = new Declaration($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 29:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 30:

        this.$ = new Declaration($$[$0-3], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 31:

        this.$ = MyTypeNode.makeNumberTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 32:

        this.$ = MyTypeNode.makeStringTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 33:

        this.$ = MyTypeNode.makeBooleanTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 34:

        this.$ = MyTypeNode.makeCustomTypeNode($$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 35:

        this.$ = MyTypeNode.makeArrayTypeNode(MyTypeNodeKind.ARRAY, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 36:

        this.$ = new Expression(ExpressionKind.ADDITION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 37:

        this.$ = new Expression(ExpressionKind.SUBSTRACTION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 38:
 
        this.$ = new Expression(ExpressionKind.MULTIPLICATION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 39:

        this.$ = new Expression(ExpressionKind.DIVISION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 40:

        this.$ = new Expression(ExpressionKind.POWER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 41:

        this.$ = new Expression(ExpressionKind.LESS, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 42:

        this.$ = new Expression(ExpressionKind.LESS_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 43:

        this.$ = new Expression(ExpressionKind.GREATER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 44:

        this.$ = new Expression(ExpressionKind.GREATER_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 45:

        this.$ = new Expression(ExpressionKind.EQUAL_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 46:

        this.$ = new Expression(ExpressionKind.NOT_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 47:

        this.$ = new Expression(ExpressionKind.OR, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 48:

        this.$ = new Expression(ExpressionKind.AND, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 49:

        this.$ = new Expression(ExpressionKind.NOT, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 50:

        this.$ = new Expression(ExpressionKind.UNARY_MINUS, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 51:

        this.$ = new Expression(ExpressionKind.POSTFIX_INC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 52:

        this.$ = new Expression(ExpressionKind.POSTFIX_DEC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 53:

        this.$ = new Expression(ExpressionKind.MEMBER_ACCESS, new MemberAccessExpression($$[$0-1], $$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 54:

        this.$ = new Expression(ExpressionKind.ASSIGNMENT, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 56:
 
        //hay que pasar la ubicacion de inicio y final de los ( )
        this.$ = $$[$0-1];
        this.$.first_line = _$[$0-2].first_line;
        this.$.first_column = _$[$0-2].first_column;
        this.$.last_line = _$[$0].last_line;

        this.$.last_column = _$[$0].last_column;
    
break;
case 57:
 
        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Number($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 58:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new String($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 59:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(true)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 60:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(false)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 61:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(null), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 62:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(undefined), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 63:

        this.$ = new Expression(ExpressionKind.IDENTIFIER, new IdentifierExpression(new String($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 64:

        this.$ = new Expression(ExpressionKind.FUNCTION_CALL, new FunctionCallExpression(new String($$[$0-3]), $$[$0-1]), _$[$0-3].first_line, _$[$0-3].first_column, _$[$0-3].last_line, _$[$0-3].last_column);
    
break;
case 65:

        this.$ = new Expression(ExpressionKind.OBJECT_LITERAL, new ObjectLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0-2].last_line, _$[$0-2].last_column);
    
break;
case 72:

        this.$ = new PropertyNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 75:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 77:

        this.$ = new MemberAccess(AccessKind.FunctionAccess, new FunctionAccess($$[$0-3], $$[$0-1]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 78:

        this.$ = new MemberAccess(AccessKind.AttributeAccess, new AttributeAccess($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 79:

        this.$ = new MemberAccess(AccessKind.IndexAccess, new IndexAccess($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
}
},
table: [{3:1,4:2,5:[2,7],8:4,9:3,10:5,11:[1,6],12:$V0,13:$V1,15:$V2,24:7,25:8,26:9,27:$V3,28:$V4,30:$V5,31:$V6,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{1:[3]},{5:[1,26]},{5:[2,6],8:27,10:28,11:[1,29],12:$V0,13:$V1,15:$V2,24:7,25:8,26:9,27:$V3,28:$V4,30:$V5,31:$V6,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{14:$Vg,21:[1,30],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,52:46,63:$Vw,64:$Vx},{21:[1,50]},o($Vy,[2,24]),{28:[1,51]},{21:[1,52]},{13:[1,53]},{13:$V1,15:$Vz,24:54,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:56,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($VA,[2,55]),{13:[1,57]},{6:58,7:60,8:62,13:[1,63],15:$V2,17:$VB,24:7,25:8,26:9,27:$V3,28:$V4,30:$V5,31:$V6,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve,59:59,61:61},{13:$V1,15:$Vz,24:64,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($VA,[2,57]),o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),o($VA,$VC,{28:$VD}),{1:[2,1]},o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vy,[2,22]),{13:$V1,15:$Vz,24:66,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:67,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:68,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:69,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:70,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:71,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:72,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:73,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:74,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:75,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:76,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:77,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$V1,15:$Vz,24:78,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($VA,[2,51]),o($VA,[2,52]),o($VA,[2,53]),{13:$V1,15:$Vz,24:79,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:[1,80]},{13:$V1,15:$Vz,24:81,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($Vy,[2,23]),{13:$V1,15:$Vz,24:82,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($Vy,[2,26]),{14:[1,83]},o($VE,[2,49],{52:46,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),{13:$VF,59:59,61:61},o($VE,[2,50],{52:46,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),{14:[1,85],22:[1,86]},{17:[1,87]},{13:$VF,17:[1,88],61:89},{8:90,13:$V1,15:$V2,17:[2,2],24:7,25:8,26:9,27:$V3,28:$V4,30:$V5,31:$V6,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($VG,[2,71],{20:[1,91]}),o($VH,[2,5]),o([14,21,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,63,64],$VC,{22:$VI,28:$VD}),{14:$Vg,29:[1,93],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,52:46,63:$Vw,64:$Vx},{13:$V1,15:$Vz,24:96,28:$V4,29:$VJ,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:94,62:95},o($VK,[2,36],{52:46,40:$Vl,41:$Vm,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VK,[2,37],{52:46,40:$Vl,41:$Vm,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VL,[2,38],{52:46,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VL,[2,39],{52:46,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VL,[2,40],{52:46,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VM,[2,41],{52:46,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VM,[2,42],{52:46,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VM,[2,43],{52:46,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VM,[2,44],{52:46,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VM,[2,45],{52:46,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VM,[2,46],{52:46,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o([13,14,17,20,21,29,47,65],[2,47],{52:46,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,48:$Vt,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o([13,14,17,20,21,29,47,48,65],[2,48],{52:46,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o([13,17,20,21,29,65],[2,54],{52:46,14:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VA,[2,78],{28:[1,97]}),{14:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,52:46,63:$Vw,64:$Vx,65:[1,98]},{14:$Vg,29:[1,99],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,52:46,63:$Vw,64:$Vx},{15:[1,100]},{22:$VI},{13:$V1,15:$Vz,24:101,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$VN,23:102,32:$VO,33:$VP,34:$VQ,35:$VR},o($Vy,[2,27]),o($VA,[2,65]),o($VG,[2,69],{20:[1,108]}),o($VH,[2,4]),o($VG,[2,70]),{13:$V1,15:$Vz,24:109,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},o($VA,[2,56]),{29:[1,110]},{20:[1,111],29:[2,73]},o($VS,[2,76],{52:46,14:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),{13:$V1,15:$Vz,24:96,28:$V4,29:$VJ,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:112,62:95},o($VA,[2,79]),{15:[1,113]},{13:$VT,16:114,17:[2,16],18:115,19:116},{14:$Vg,21:[2,28],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,52:46,63:$Vw,64:$Vx},{14:[1,118],21:[2,30]},o($VU,[2,31]),o($VU,[2,32]),o($VU,[2,33]),o($VU,[2,34]),{36:[1,119]},o($VG,[2,68]),o([13,17,20],[2,72],{52:46,14:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VA,[2,64]),{13:$V1,15:$Vz,24:120,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{29:[1,121]},{6:122,7:60,8:62,13:$V1,15:$V2,17:$VB,24:7,25:8,26:9,27:$V3,28:$V4,30:$V5,31:$V6,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{17:[1,123]},{13:$VT,17:[2,15],19:124},{20:[1,126],21:[1,125]},{22:[1,127]},{13:$V1,15:$Vz,24:128,28:$V4,32:$V7,33:$V8,39:$V9,49:$Va,53:15,54:$Vb,55:$Vc,56:$Vd,57:$Ve},{13:$VN,23:129,32:$VO,33:$VP,34:$VQ,35:$VR},o($VS,[2,75],{52:46,14:$Vg,36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,63:$Vw,64:$Vx}),o($VA,[2,77]),{17:[1,130]},o($Vf,[2,14]),{20:[1,131],21:[1,132]},o($VG,[2,19]),o($VG,[2,20]),{13:$VN,23:133,32:$VO,33:$VP,34:$VQ,35:$VR},{14:$Vg,21:[2,29],36:$Vh,37:$Vi,38:$Vj,39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,50:$Vu,51:$Vv,52:46,63:$Vw,64:$Vx},{37:[1,134]},o($Vy,[2,25]),o($VG,[2,17]),o($VG,[2,18]),o([20,21],[2,21]),o($VU,[2,35])],
defaultActions: {26:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Expression, ExpressionKind, 
    UnaryExpression, BinaryExpression, TernaryExpression, LiteralExpression, 
    IdentifierExpression, FunctionCallExpression, MemberAccessExpression, 
    PropertyNode, ObjectLiteralExpression } = require('../Ast/Expression');
    const { MemberAccess, AccessKind, FunctionAccess, IndexAccess, AttributeAccess } = require('../Ast/MemberAccess');
    const { Statement, StatementKind, Block, WhileStatement } = require('../Ast/Statement');
    const { Assignment } = require('../Ast/Assignment');
    const { Declaration } = require('../Ast/Declaration');
    const { MyTypeNode, MyTypeNodeKind } = require('../Ast/MyTypeNode');
    const { GlobalInstructions } = require('../Ast/GlobalInstructions')
    const { TypeDef, AttributeNode } = require('../Ast/TypeDef')
    const { FunctionDef, ParamNode } = require('../Ast/FunctionDef')
    //const {Literal} = require('../Expression/Literal');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 54
break;
case 4:return 55
break;
case 5:return 57
break;
case 6:return 56
break;
case 7:return 12
break;
case 8:return 27
break;
case 9:return 30
break;
case 10:return 47
break;
case 11:return 48
break;
case 12:return 45
break;
case 13:return 46
break;
case 14:return 44
break;
case 15:return 43
break;
case 16:return 37
break;
case 17:return 36
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return 40
break;
case 21:return 41
break;
case 22:return '%'
break;
case 23:return 42
break;
case 24:return 49
break;
case 25:return 50
break;
case 26:return 51
break;
case 27:return 28
break;
case 28:return 29
break;
case 29:return 14
break;
case 30:return 63
break;
case 31:return 64
break;
case 32:return 65
break;
case 33:return 31
break;
case 34:return 32
break;
case 35:return 33
break;
case 36:return 34
break;
case 37:return 20
break;
case 38:return 21
break;
case 39:return 15
break;
case 40:return 17
break;
case 41:return 22
break;
case 42:return '~'
break;
case 43:return 5
break;
case 44:return 32
break;
case 45:return 13
break;
case 46:return 33
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:OR\b)/,/^(?:AND\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:NOT\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:let\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:~)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:("[^"]*"))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = RunnerParser;
exports.Parser = RunnerParser.Parser;
exports.parse = function () { return RunnerParser.parse.apply(RunnerParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}