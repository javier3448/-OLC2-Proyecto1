/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var RunnerParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,36],$V2=[1,29],$V3=[1,26],$V4=[1,20],$V5=[1,10],$V6=[1,11],$V7=[1,13],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,27],$Vc=[1,25],$Vd=[1,28],$Ve=[1,30],$Vf=[1,31],$Vg=[1,37],$Vh=[1,23],$Vi=[1,22],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[5,12,13,14,19,26,35,36,38,44,45,46,48,50,53,58,59,64,67,77,83,84,85,86],$Vo=[1,60],$Vp=[1,48],$Vq=[1,50],$Vr=[1,62],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,49],$Vy=[1,51],$Vz=[1,52],$VA=[1,53],$VB=[1,54],$VC=[1,55],$VD=[1,56],$VE=[1,57],$VF=[1,59],$VG=[1,61],$VH=[5,12,13,14,19,20,26,35,36,38,44,45,46,48,50,53,56,57,58,59,64,67,77,83,84,85,86],$VI=[1,74],$VJ=[13,16,17,20,24,27,31,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,81,92],$VK=[2,11],$VL=[2,105],$VM=[1,86],$VN=[2,117],$VO=[13,16,17,20,24,27,31,62,63,65,66,67,68,69,70,71,72,73,74,75,76,81],$VP=[1,116],$VQ=[1,118],$VR=[1,117],$VS=[2,70],$VT=[13,20],$VU=[13,14,19,20,35,36,38,44,45,46,48,50,53,58,59,64,67,77,83,84,85,86],$VV=[1,124],$VW=[16,24,65],$VX=[13,16,17,20,24,27,31,62,63,65,66,67,71,72,73,74,75,76,81],$VY=[13,16,17,20,24,27,31,62,63,65,66,67,68,69,71,72,73,74,75,76,81],$VZ=[13,16,17,20,24,27,31,65,73,74,75,76,81],$V_=[1,142],$V$=[1,148],$V01=[1,145],$V11=[1,146],$V21=[1,147],$V31=[1,149],$V41=[2,65],$V51=[1,167],$V61=[13,16],$V71=[1,173],$V81=[13,16,20,24,27,31,63,64],$V91=[13,14,19,20,35,36,38,44,45,46,48,50,53,56,57,58,59,64,67,77,83,84,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"GlobalInstructions_":4,"EOF":5,"GlobalInstructions":6,"Statement":7,"TypeDef":8,"FunctionDef":9,"StatementList_":10,"StatementList":11,"FUNCTION":12,"IDENTIFIER":13,"(":14,"ParamList_":15,")":16,":":17,"MyTypeNode":18,"{":19,"}":20,"VOID":21,"ParamList":22,"Param":23,",":24,"Type":25,"TYPE":26,"=":27,"AttributeList_":28,"AttributeList":29,"Attribute":30,";":31,"Expression":32,"Declaration":33,"Block":34,"WHILE":35,"DO":36,"IfStatement":37,"FOR":38,"ExpressionOrDeclaration_":39,"Expression_":40,"ForOfStatement":41,"ForInStatement":42,"SwitchStatement":43,"BREAK":44,"CONTINUE":45,"RETURN":46,"Expresssion":47,"IF":48,"ELSE":49,"LET":50,"OF":51,"IN":52,"SWITCH":53,"SwitchInstructions_":54,"SwitchInstructions":55,"CASE":56,"DEFAULT":57,"NUMBER":58,"STRING":59,"BOOLEAN":60,"ARRAY":61,"<":62,">":63,"[":64,"]":65,"+":66,"-":67,"*":68,"/":69,"**":70,"<=":71,">=":72,"==":73,"!=":74,"OR":75,"AND":76,"NOT":77,"++":78,"--":79,"MemberAccess":80,"?":81,"F":82,"TRUE":83,"FALSE":84,"NULL":85,"UNDEFINED":86,"ExpressionList_":87,"PropertyList":88,"PropertyList_":89,"Property":90,"ExpressionList":91,".":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"FUNCTION",13:"IDENTIFIER",14:"(",16:")",17:":",18:"MyTypeNode",19:"{",20:"}",21:"VOID",24:",",26:"TYPE",27:"=",31:";",35:"WHILE",36:"DO",38:"FOR",44:"BREAK",45:"CONTINUE",46:"RETURN",47:"Expresssion",48:"IF",49:"ELSE",50:"LET",51:"OF",52:"IN",53:"SWITCH",56:"CASE",57:"DEFAULT",58:"NUMBER",59:"STRING",60:"BOOLEAN",61:"ARRAY",62:"<",63:">",64:"[",65:"]",66:"+",67:"-",68:"*",69:"/",70:"**",71:"<=",72:">=",73:"==",74:"!=",75:"OR",76:"AND",77:"NOT",78:"++",79:"--",81:"?",83:"TRUE",84:"FALSE",85:"NULL",86:"UNDEFINED",92:"."},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[10,1],[10,0],[11,2],[11,1],[9,10],[9,10],[15,1],[15,0],[22,3],[22,2],[22,2],[22,1],[23,3],[8,6],[28,1],[28,0],[29,3],[29,3],[29,2],[29,2],[29,2],[29,1],[30,3],[7,2],[7,2],[7,1],[7,7],[7,9],[7,1],[7,11],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,3],[37,7],[37,9],[37,9],[41,10],[42,10],[43,7],[54,1],[54,0],[55,3],[55,2],[55,1],[55,4],[55,3],[55,2],[39,1],[39,1],[39,0],[40,1],[40,0],[34,3],[33,4],[33,6],[33,4],[33,2],[25,1],[25,1],[25,1],[25,1],[25,4],[25,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,2],[32,2],[32,2],[32,5],[32,3],[32,1],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,4],[82,3],[82,3],[89,1],[89,0],[88,3],[88,2],[88,2],[88,1],[90,3],[87,1],[87,0],[91,3],[91,1],[80,5],[80,2],[80,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = $$[$0-1];
        this.$.setAstNode(_$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
        return this.$;
    
break;
case 2: case 10: case 16: case 24: case 38: case 40: case 41: case 42: case 53: case 61: case 64: case 97: case 109: case 116:

        this.$ = $$[$0];
    
break;
case 3:

        this.$ = new GlobalInstructions();
    
break;
case 4:

        this.$.addStatement($$[$0]);
    
break;
case 5:

        this.$.addTypeDef($$[$0]);
    
break;
case 6:

        this.$.addFunctionDef($$[$0]);
    
break;
case 7:

        this.$ = new GlobalInstructions();
        this.$.addStatement($$[$0]);
    
break;
case 8:

        this.$ = new GlobalInstructions();
        this.$.addTypeDef($$[$0]);
    
break;
case 9:

        this.$ = new GlobalInstructions();
        this.$.addFunctionDef($$[$0]);
    
break;
case 11: case 17: case 110: case 117:

        this.$ = new Array();
    
break;
case 12: case 19: case 28: case 112:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 13: case 21: case 31: case 114: case 119:

        this.$ = new Array($$[$0]);
    
break;
case 14:

        this.$ = new FunctionDef($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column, _$[$0-8].last_line, _$[$0-8].last_column);
    
break;
case 15:

        this.$ = new FunctionDef($$[$0-8], $$[$0-6], null, $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column, _$[$0-8].last_line, _$[$0-8].last_column);
    
break;
case 18: case 26: case 27: case 111:

        this.$ = $$[$0-2];
        this.$.push($$[$0-1]);
    
break;
case 20: case 29: case 30: case 113:

        this.$ = new Array($$[$0-1]);
    
break;
case 22:

        this.$ = new ParamNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 23:

        this.$ = new TypeDef($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0-4].last_line, _$[$0-4].last_column);
    
break;
case 25:

        new Array();
    
break;
case 32:

        this.$ = new AttributeNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 33:

        this.$ = new Statement(StatementKind.ExpressionKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 34:

        this.$ = new Statement(StatementKind.DeclarationKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 35:

        this.$ = new Statement(StatementKind.BlockKind, $$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 36:

        this.$ = new Statement(StatementKind.WhileKind, new WhileStatement($$[$0-4], $$[$0-1]), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0-1].last_line, _$[$0-1].last_column);
    
break;
case 37:

        this.$ = new Statement(StatementKind.DoWhileKind, new DoWhileStatement($$[$0-6], $$[$0-2]), _$[$0-8].first_line, _$[$0-8].first_column, _$[$0-3].last_line, _$[$0-3].last_column);
    
break;
case 39:

        this.$ = new Statement(StatementKind.ForKind, new ForStatement($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-10].first_line, _$[$0-10].first_column, _$[$0-4].last_line, _$[$0-4].last_column);
    
break;
case 43:

        this.$ = new Statement(StatementKind.BreakKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 44:

        this.$ = new Statement(StatementKind.ContinueKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 45:

        this.$ = new Statement(StatementKind.ReturnKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 46:

        this.$ = new Statement(StatementKind.ReturnWithExpression, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 47:

        this.$ = new Statement(StatementKind.IfKind, new IfStatement($$[$0-4], $$[$0-1], null), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0-1].last_line, _$[$0-1].last_column);
    
break;
case 48:

        let blockStatement =  new Statement(StatementKind.BlockKind, $$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
        this.$ = new Statement(StatementKind.IfKind, new IfStatement($$[$0-6], $$[$0-3], blockStatement), _$[$0-8].first_line, _$[$0-8].first_column, _$[$0-3].last_line, _$[$0-3].last_column);
    
break;
case 49:

        this.$ = new Statement(StatementKind.IfKind, new IfStatement($$[$0-6], $$[$0-3], $$[$0]), _$[$0-8].first_line, _$[$0-8].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 50:

        this.$ = new Statement(StatementKind.ForOfKind, new ForOfStatement($$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-9].first_line, _$[$0-9].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 51:

        this.$ = new Statement(StatementKind.ForInKind, new ForInStatement($$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-9].first_line, _$[$0-9].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 52:

        this.$ = new Statement(StatementKind.SwitchKind, new SwitchStatement($$[$0-4], $$[$0-1]), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 54:

        this.$ = new SwitchInstructions([],[],[]);
    
break;
case 55:

        this.$ = new SwitchInstructions([new SwitchCase($$[$0-1], 0)],[],[]);
    
break;
case 56:

        this.$ = new SwitchInstructions([],[new SwitchDefault(0)],[]);
    
break;
case 57:

        this.$ = new SwitchInstructions([],[],[$$[$02]]);
    
break;
case 58:

        this.$ = $$[$0-3];
        this.$.cases.push(new SwitchCase($$[$0-1], this.$.statements.length));
    
break;
case 59:

        this.$ = $$[$0-2];
        this.$.defaults.push(new SwitchDefault(this.$.statements.length));
    
break;
case 60:

        this.$ = $$[$0-1];
        this.$.statements.push($$[$0]);
    
break;
case 62:

        this.$ = new Statement(StatementKind.DeclarationKind, $$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 63: case 65:

        this.$ = null;
    
break;
case 66:

        this.$ = new Block($$[$0-1]);
    
break;
case 67:

        this.$ = new Declaration($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 68:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 69:

        this.$ = new Declaration($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 70:

        this.$ = new Declaration($$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 71:

        this.$ = MyTypeNode.makeNumberTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 72:

        this.$ = MyTypeNode.makeStringTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 73:

        this.$ = MyTypeNode.makeBooleanTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 74:

        this.$ = MyTypeNode.makeCustomTypeNode($$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 75:

        this.$ = MyTypeNode.makeGenericArrayTypeNode($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 76:

        this.$ = MyTypeNode.makeBoxyArrayTypeNode($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 77:

        this.$ = new Expression(ExpressionKind.ADDITION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 78:

        this.$ = new Expression(ExpressionKind.SUBSTRACTION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 79:
 
        this.$ = new Expression(ExpressionKind.MULTIPLICATION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 80:

        this.$ = new Expression(ExpressionKind.DIVISION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 81:

        this.$ = new Expression(ExpressionKind.POWER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 82:

        this.$ = new Expression(ExpressionKind.LESS, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 83:

        this.$ = new Expression(ExpressionKind.LESS_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 84:

        this.$ = new Expression(ExpressionKind.GREATER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 85:

        this.$ = new Expression(ExpressionKind.GREATER_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 86:

        this.$ = new Expression(ExpressionKind.EQUAL_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 87:

        this.$ = new Expression(ExpressionKind.NOT_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 88:

        this.$ = new Expression(ExpressionKind.OR, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 89:

        this.$ = new Expression(ExpressionKind.AND, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 90:

        this.$ = new Expression(ExpressionKind.NEGATION, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 91:

        this.$ = new Expression(ExpressionKind.UNARY_MINUS, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 92:

        this.$ = new Expression(ExpressionKind.POSTFIX_INC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 93:

        this.$ = new Expression(ExpressionKind.POSTFIX_DEC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 94:

        this.$ = new Expression(ExpressionKind.MEMBER_ACCESS, new MemberAccessExpression($$[$0-1], $$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 95:

        this.$ = new Expression(ExpressionKind.TERNARY, new TernaryExpression($$[$0-4], $$[$0-2], $$[$0]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 96:

        this.$ = new Expression(ExpressionKind.ASSIGNMENT, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 98:
 
        //hay que pasar la ubicacion de inicio y final de los ( )
        this.$ = $$[$0-1];
        this.$.first_line = _$[$0-2].first_line;
        this.$.first_column = _$[$0-2].first_column;
        this.$.last_line = _$[$0].last_line;

        this.$.last_column = _$[$0].last_column;
    
break;
case 99:
 
        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Number($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 100:

        //TERRIBLE PERFORMANCE:
        //The worst performance ever. You really should be ashamed of yourself :(
        let s = $$[$0].slice(1, $$[$0].length - 1).replaceAll("\\n", "\n");
        s = s.replaceAll("\\r", "\r");
        s = s.replaceAll("\\t", "\t");
        console.log(s);
        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new String(s)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 101:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(true)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 102:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(false)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 103:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(null), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 104:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(undefined), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 105:

        this.$ = new Expression(ExpressionKind.IDENTIFIER, new IdentifierExpression(new String($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 106:

        this.$ = new Expression(ExpressionKind.FUNCTION_CALL, new FunctionCallExpression(new String($$[$0-3]), $$[$0-1]), _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 107:

        this.$ = new Expression(ExpressionKind.OBJECT_LITERAL, new ObjectLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 108:

        this.$ = new Expression(ExpressionKind.ARRAY_LITERAL, new ArrayLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 115:

        this.$ = new PropertyNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 118:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 120:

        this.$ = new MemberAccess(AccessKind.FunctionAccess, new FunctionAccess($$[$0-3], $$[$0-1]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 121:

        this.$ = new MemberAccess(AccessKind.AttributeAccess, new AttributeAccess($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 122:

        this.$ = new MemberAccess(AccessKind.IndexAccess, new IndexAccess($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,12:$V0,13:$V1,14:$V2,19:$V3,26:$V4,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{1:[3]},{5:[1,38]},{5:[2,2],7:39,8:40,9:41,12:$V0,13:$V1,14:$V2,19:$V3,26:$V4,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),{27:$Vo,31:[1,42],62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{31:[1,63]},o($VH,[2,35]),{14:[1,64]},{19:[1,65]},o($VH,[2,38]),{14:[1,66]},o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),{31:[1,67]},{31:[1,68]},{31:[1,69],47:[1,70]},{13:[1,71]},{13:[1,72]},{13:$V1,14:$V2,19:$VI,32:73,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:75,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VJ,[2,97]),{13:[1,76]},{7:81,10:77,11:79,13:[1,82],14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm,88:78,90:80},{14:[1,83]},{14:[1,84]},{13:$V1,14:$V2,19:$VI,32:85,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VJ,[2,99]),o($VJ,[2,100]),o($VJ,[2,101]),o($VJ,[2,102]),o($VJ,[2,103]),o($VJ,[2,104]),o($VJ,$VL,{14:$VM}),{13:$V1,14:$V2,19:$VI,32:89,58:$Ve,59:$Vf,64:$Vg,65:$VN,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:87,91:88},{1:[2,1]},o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($VH,[2,33]),{13:$V1,14:$V2,19:$VI,32:90,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:91,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:92,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:93,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:94,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:95,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:96,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:97,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:98,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:99,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:100,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:101,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:102,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VJ,[2,92]),o($VJ,[2,93]),o($VJ,[2,94]),{13:$V1,14:$V2,19:$VI,32:103,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:104,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:[1,105]},{13:$V1,14:$V2,19:$VI,32:106,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VH,[2,34]),{13:$V1,14:$V2,19:$VI,32:107,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:81,10:108,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,31:[2,63],32:111,33:112,39:109,50:[1,110],58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),{31:[1,113]},{27:[1,114]},{14:[1,115]},o($VO,[2,90],{80:58,64:$Vr,78:$VD,79:$VE,92:$VG}),{13:$VP,88:78,90:80},o($VO,[2,91],{80:58,64:$Vr,78:$VD,79:$VE,92:$VG}),{17:$VQ,27:$VR,31:$VS},{20:[1,119]},{13:$VP,20:[1,120],90:121},{7:122,13:$V1,14:$V2,19:$V3,20:[2,10],32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VT,[2,114],{24:[1,123]}),o($VU,[2,13]),o([27,31,62,63,64,66,67,68,69,70,71,72,73,74,75,76,78,79,81,92],$VL,{14:$VM,17:$VV}),{13:$V1,14:$V2,19:$VI,32:125,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:126,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{16:[1,127],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{13:$V1,14:$V2,16:$VN,19:$VI,32:89,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:128,91:88},{65:[1,129]},o([16,65],[2,116],{24:[1,130]}),o($VW,[2,119],{80:58,27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,81:$VF,92:$VG}),o($VX,[2,77],{80:58,64:$Vr,68:$Vu,69:$Vv,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VX,[2,78],{80:58,64:$Vr,68:$Vu,69:$Vv,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VY,[2,79],{80:58,64:$Vr,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VY,[2,80],{80:58,64:$Vr,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VY,[2,81],{80:58,64:$Vr,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VZ,[2,82],{80:58,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VZ,[2,83],{80:58,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VZ,[2,84],{80:58,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VZ,[2,85],{80:58,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,78:$VD,79:$VE,92:$VG}),o($VZ,[2,86],{80:58,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,78:$VD,79:$VE,92:$VG}),o($VZ,[2,87],{80:58,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,78:$VD,79:$VE,92:$VG}),o([13,16,17,20,24,27,31,65,75,81],[2,88],{80:58,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,76:$VC,78:$VD,79:$VE,92:$VG}),o([13,16,17,20,24,27,31,65,75,76,81],[2,89],{80:58,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,78:$VD,79:$VE,92:$VG}),{17:[1,131],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},o([13,16,17,20,24,31,65],[2,96],{80:58,27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,81:$VF,92:$VG}),o($VJ,[2,121],{14:[1,132]}),{27:$Vo,62:$Vp,63:$Vq,64:$Vr,65:[1,133],66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{16:[1,134],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{20:[1,135]},{31:[1,136]},{13:[1,137]},{27:$Vo,31:[2,61],62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{31:[2,62]},o($VH,[2,46]),{19:[1,138]},{13:$V_,15:139,16:[2,17],22:140,23:141},{17:$VV},{13:$V1,14:$V2,19:$VI,32:143,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V$,25:144,58:$V01,59:$V11,60:$V21,61:$V31},o($VH,[2,66]),o($VJ,[2,107]),o($VT,[2,112],{24:[1,150]}),o($VU,[2,12]),o($VT,[2,113]),{13:$V1,14:$V2,19:$VI,32:151,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{16:[1,152],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{16:[1,153],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},o($VJ,[2,98]),{16:[1,154]},o($VJ,[2,108]),{13:$V1,14:$V2,19:$VI,32:155,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:156,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,16:$VN,19:$VI,32:89,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:157,91:88},o($VJ,[2,122]),{19:[1,158]},{35:[1,159]},{13:$V1,14:$V2,19:$VI,31:$V41,32:161,40:160,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{17:$VQ,27:$VR,31:$VS,51:[1,162],52:[1,163]},{13:$V51,20:[2,25],28:164,29:165,30:166},{16:[1,168]},{13:$V_,16:[2,16],23:169},o($V61,[2,21],{24:[1,170]}),{17:[1,171]},{27:$Vo,31:[2,67],62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{27:[1,172],31:[2,69],64:$V71},o($V81,[2,71]),o($V81,[2,72]),o($V81,[2,73]),o($V81,[2,74]),{62:[1,174]},o($VT,[2,111]),o([13,20,24],[2,115],{80:58,27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,81:$VF,92:$VG}),{19:[1,175]},{19:[1,176]},o($VJ,[2,106]),o($VW,[2,118],{80:58,27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,81:$VF,92:$VG}),o([13,16,17,20,24,27,31,65],[2,95],{80:58,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,81:$VF,92:$VG}),{16:[1,177]},{7:81,10:178,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:[1,179]},{31:[1,180]},o([16,31],[2,64],{80:58,27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,81:$VF,92:$VG}),{13:$V1,14:$V2,19:$VI,32:181,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:182,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{20:[1,183]},{13:$V51,20:[2,24],30:184},o($VT,[2,31],{24:[1,186],31:[1,185]}),{17:[1,187]},{17:[1,188]},o($V61,[2,19],{24:[1,189]}),o($V61,[2,20]),{13:$V$,25:190,58:$V01,59:$V11,60:$V21,61:$V31},{13:$V1,14:$V2,19:$VI,32:191,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{65:[1,192]},{13:$V$,25:193,58:$V01,59:$V11,60:$V21,61:$V31},{7:81,10:194,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:199,13:$V1,14:$V2,19:$V3,20:[2,54],32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,54:195,55:196,56:[1,197],57:[1,198],58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VJ,[2,120]),{20:[1,200]},{13:$V1,14:$V2,19:$VI,32:201,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,16:$V41,19:$VI,32:161,40:202,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{16:[1,203],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{16:[1,204],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},o($Vn,[2,23]),o($VT,[2,28],{24:[1,205],31:[1,206]}),o($VT,[2,29]),o($VT,[2,30]),{13:$V$,25:207,58:$V01,59:$V11,60:$V21,61:$V31},{18:[1,208],21:[1,209]},o($V61,[2,18]),o([13,16,24],[2,22],{64:$V71}),{27:$Vo,31:[2,68],62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},o($V81,[2,76]),{63:[1,210],64:$V71},{20:[1,211]},{20:[1,212]},{7:215,13:$V1,14:$V2,19:$V3,20:[2,53],32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,56:[1,213],57:[1,214],58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{13:$V1,14:$V2,19:$VI,32:216,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{17:[1,217]},o($V91,[2,57]),o($VH,[2,36]),{16:[1,218],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},{16:[1,219]},{19:[1,220]},{19:[1,221]},o($VT,[2,26]),o($VT,[2,27]),o([13,20,24,31],[2,32],{64:$V71}),{19:[1,222]},{19:[1,223]},o($V81,[2,75]),o($VH,[2,47],{49:[1,224]}),o($VH,[2,52]),{13:$V1,14:$V2,19:$VI,32:225,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{17:[1,226]},o($V91,[2,60]),{17:[1,227],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},o($V91,[2,56]),{31:[1,228]},{19:[1,229]},{7:81,10:230,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:81,10:231,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:81,10:232,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:81,10:233,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{19:[1,236],34:234,37:235,48:$Vb},{17:[1,237],27:$Vo,62:$Vp,63:$Vq,64:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,78:$VD,79:$VE,80:58,81:$VF,92:$VG},o($V91,[2,59]),o($V91,[2,55]),o($VH,[2,37]),{7:81,10:238,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{20:[1,239]},{20:[1,240]},{20:[1,241]},{20:[1,242]},o($VH,[2,48]),o($VH,[2,49]),{7:81,10:77,11:79,13:$V1,14:$V2,19:$V3,20:$VK,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,48:$Vb,50:$Vc,53:$Vd,58:$Ve,59:$Vf,64:$Vg,67:$Vh,77:$Vi,82:24,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($V91,[2,58]),{20:[1,243]},o($VH,[2,50]),o($VH,[2,51]),o($Vn,[2,14]),o($Vn,[2,15]),o($VH,[2,39])],
defaultActions: {38:[2,1],112:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Expression, ExpressionKind, 
    UnaryExpression, BinaryExpression, TernaryExpression, LiteralExpression, 
    IdentifierExpression, FunctionCallExpression, MemberAccessExpression, 
    PropertyNode, ObjectLiteralExpression, ArrayLiteralExpression } = require('../Ast/Expression');
    const { MemberAccess, AccessKind, FunctionAccess, IndexAccess, AttributeAccess } = require('../Ast/MemberAccess');
    const { Statement, StatementKind, Block, 
            WhileStatement, DoWhileStatement, IfStatement, 
            ForStatement, ForOfStatement, ForInStatement, 
            SwitchStatement, SwitchCase, SwitchDefault, 
            SwitchInstructions } = require('../Ast/Statement');
    const { Assignment } = require('../Ast/Assignment');
    const { Declaration } = require('../Ast/Declaration');
    const { MyTypeNode, MyTypeNodeKind } = require('../Ast/MyTypeNode');
    const { GlobalInstructions } = require('../Ast/GlobalInstructions')
    const { TypeDef, AttributeNode } = require('../Ast/TypeDef')
    const { FunctionDef, ParamNode } = require('../Ast/FunctionDef')
    //const {Literal} = require('../Expression/Literal');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 83
break;
case 4:return 84
break;
case 5:return 86
break;
case 6:return 85
break;
case 7:return 26
break;
case 8:return 61
break;
case 9:return 12
break;
case 10:return 35
break;
case 11:return 36
break;
case 12:return 48
break;
case 13:return 49
break;
case 14:return 53
break;
case 15:return 56
break;
case 16:return 57
break;
case 17:return 38
break;
case 18:return 'FORIN'
break;
case 19:return 52
break;
case 20:return 51
break;
case 21:return 44
break;
case 22:return 45
break;
case 23:return 46
break;
case 24:return 75
break;
case 25:return 76
break;
case 26:return 73
break;
case 27:return 74
break;
case 28:return 72
break;
case 29:return 71
break;
case 30:return 63
break;
case 31:return 62
break;
case 32:return 78
break;
case 33:return 79
break;
case 34:return 66
break;
case 35:return 67
break;
case 36:return 70
break;
case 37:return 68
break;
case 38:return 69
break;
case 39:return '%'
break;
case 40:return 77
break;
case 41:return 14
break;
case 42:return 16
break;
case 43:return 27
break;
case 44:return 92
break;
case 45:return 64
break;
case 46:return 65
break;
case 47:return 50
break;
case 48:return 50//TODO TODO TODO: HACER EL CONST DE VERDAD!!!!!
break;
case 49:return 58
break;
case 50:return 59
break;
case 51:return 60
break;
case 52:return 21
break;
case 53:return 24
break;
case 54:return 31
break;
case 55:return 19
break;
case 56:return 20
break;
case 57:return 17
break;
case 58:return 81
break;
case 59:return '~'
break;
case 60:return 5
break;
case 61:return 58
break;
case 62:return 13
break;
case 63:return 59
break;
case 64:return 59
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:function\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:forin\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:OR\b)/,/^(?:AND\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:NOT\b)/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\?)/,/^(?:~)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:("[^"]*"))/,/^(?:('[^']*'))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = RunnerParser;
exports.Parser = RunnerParser.Parser;
exports.parse = function () { return RunnerParser.parse.apply(RunnerParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}